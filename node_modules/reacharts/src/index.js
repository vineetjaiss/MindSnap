import React from 'react';
import echarts from 'echarts';



class app extends React.Component {
  constructor(props) {
    super(props);
    const num = Math.random();
    this.setData=this.setData.bind(this);
    this.changeWidth=this.changeWidth.bind(this);
    
    this.state = {
      id: num
    };
  }

  setData (){
    const { type, x = [], config = {}, y = [], series = [], title = '' } = this.props;
    const { isShowAxis = true, radar,isReverseXy } = config;

    let optionShowAxis = isShowAxis;
    const optionData = series.concat();
    const optionX = x.concat();
    const optionY = y.concat();

    if (optionData.length > 0) {
      optionData.map(item => {
        if (!isShowAxis) {
          item.areaStyle = {};
        }
        item.type = type;
      });
    }

    // if (optionX.length == 0) {
    //   optionShowAxis = false;
    // }


    const option = {
      title: {
        text: title
      },
      tooltip: {
        trigger: 'axis',
        axisPointer: {
          type: 'none'
        }
      },
      xAxis: {
        data: optionX,
        show: optionShowAxis,
       

      },
      yAxis: {
          type: 'value',
          show: optionShowAxis ,
          data: optionY
        },
      
      series: optionData
    };

      if(isReverseXy){
         option.yAxis.type='category';
         option.xAxis.type='value';

      }
    


    switch (type) {
      case 'pie':
        delete option.xAxis;
        delete option.yAxis;
        option.tooltip = {
          trigger: 'item',
          formatter: '{a} <br/>{b} : {c} ({d}%)'
        };
        break;

      case 'scatter':
        option.xAxis = {};

        break;

      case 'map':
        delete option.xAxis;
        delete option.yAxis;
        delete option.tooltip;

        break;

      case 'radar':
        delete option.xAxis;
        delete option.yAxis;
        option.radar = radar;
        option.tooltip = {};
        break;

      case 'gauge':
         option.xAxis.show=false;
         option.yAxis.show=false;

        break;
      default:
        break;
    }

    return option;
  };

  componentDidMount() {
    const { id } = this.state;

    this.changeWidth(id);

    const myChart = echarts.init(document.getElementById(id));
    myChart.setOption(this.setData());

    const that = this;
    window.addEventListener(
      'resize',
      () => {
        that.changeWidth(id);
        myChart.resize();
      },
      false
    );
  }

  changeWidth (id) {
    document.getElementById(id).style.width = document.getElementById(id).parentNode.offsetWidth;
    document.getElementById(id).style.height = document.getElementById(id).parentNode.offsetHeight;
  };

  render() {
    const { id } = this.state;
    const styles = {
      minHeight: 350,
      height: 300
    };

  return <div id={id} style={styles} ></div>;
  }
}

module.exports= app;

// 传入的type 为 图表类型, 一般为:'line','bar' ：string
// x为x轴上的数据。数组类型 :array
//y为y轴上的数据。数组类型 :array
// series 为y轴上的数据，数组格式，默认格式为[{data:[]}],:array
// title 为图表的标题，显示在图表的上方：string
// config 为图表的其他可配置项，：object
