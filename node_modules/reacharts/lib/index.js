'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _echarts = require('echarts');

var _echarts2 = _interopRequireDefault(_echarts);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var app = function (_React$Component) {
  _inherits(app, _React$Component);

  function app(props) {
    _classCallCheck(this, app);

    var _this = _possibleConstructorReturn(this, (app.__proto__ || Object.getPrototypeOf(app)).call(this, props));

    var num = Math.random();
    _this.setData = _this.setData.bind(_this);
    _this.changeWidth = _this.changeWidth.bind(_this);

    _this.state = {
      id: num
    };
    return _this;
  }

  _createClass(app, [{
    key: 'setData',
    value: function setData() {
      var _props = this.props,
          type = _props.type,
          _props$x = _props.x,
          x = _props$x === undefined ? [] : _props$x,
          _props$config = _props.config,
          config = _props$config === undefined ? {} : _props$config,
          _props$y = _props.y,
          y = _props$y === undefined ? [] : _props$y,
          _props$series = _props.series,
          series = _props$series === undefined ? [] : _props$series,
          _props$title = _props.title,
          title = _props$title === undefined ? '' : _props$title;
      var _config$isShowAxis = config.isShowAxis,
          isShowAxis = _config$isShowAxis === undefined ? true : _config$isShowAxis,
          radar = config.radar,
          isReverseXy = config.isReverseXy;


      var optionShowAxis = isShowAxis;
      var optionData = series.concat();
      var optionX = x.concat();
      var optionY = y.concat();

      if (optionData.length > 0) {
        optionData.map(function (item) {
          if (!isShowAxis) {
            item.areaStyle = {};
          }
          item.type = type;
        });
      }

      // if (optionX.length == 0) {
      //   optionShowAxis = false;
      // }


      var option = {
        title: {
          text: title
        },
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            type: 'none'
          }
        },
        xAxis: {
          data: optionX,
          show: optionShowAxis

        },
        yAxis: {
          type: 'value',
          show: optionShowAxis,
          data: optionY
        },

        series: optionData
      };

      if (isReverseXy) {
        option.yAxis.type = 'category';
        option.xAxis.type = 'value';
      }

      switch (type) {
        case 'pie':
          delete option.xAxis;
          delete option.yAxis;
          option.tooltip = {
            trigger: 'item',
            formatter: '{a} <br/>{b} : {c} ({d}%)'
          };
          break;

        case 'scatter':
          option.xAxis = {};

          break;

        case 'map':
          delete option.xAxis;
          delete option.yAxis;
          delete option.tooltip;

          break;

        case 'radar':
          delete option.xAxis;
          delete option.yAxis;
          option.radar = radar;
          option.tooltip = {};
          break;

        case 'gauge':
          option.xAxis.show = false;
          option.yAxis.show = false;

          break;
        default:
          break;
      }

      return option;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var id = this.state.id;


      this.changeWidth(id);

      var myChart = _echarts2.default.init(document.getElementById(id));
      myChart.setOption(this.setData());

      var that = this;
      window.addEventListener('resize', function () {
        that.changeWidth(id);
        myChart.resize();
      }, false);
    }
  }, {
    key: 'changeWidth',
    value: function changeWidth(id) {
      document.getElementById(id).style.width = document.getElementById(id).parentNode.offsetWidth;
      document.getElementById(id).style.height = document.getElementById(id).parentNode.offsetHeight;
    }
  }, {
    key: 'render',
    value: function render() {
      var id = this.state.id;

      var styles = {
        minHeight: 350,
        height: 300
      };

      return _react2.default.createElement('div', { id: id, style: styles });
    }
  }]);

  return app;
}(_react2.default.Component);

module.exports = app;

// 传入的type 为 图表类型, 一般为:'line','bar' ：string
// x为x轴上的数据。数组类型 :array
//y为y轴上的数据。数组类型 :array
// series 为y轴上的数据，数组格式，默认格式为[{data:[]}],:array
// title 为图表的标题，显示在图表的上方：string
// config 为图表的其他可配置项，：object